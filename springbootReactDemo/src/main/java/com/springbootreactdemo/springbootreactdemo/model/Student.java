package com.springbootreactdemo.springbootreactdemo.model;
//following code belongs to the package com.example.sbrdemo.model. Packages are used in Java to organize classes into namespaces, which helps avoid naming conflicts and makes the code more manageable.

import jakarta.persistence.*;//imports annotations and classes from the Jakarta Persistence API. Jakarta Persistence is a Java API for the management of persistence and object/relational mapping in Java applications.
import lombok.Data;//imports the @Data annotation from the Lombok library. Lombok is a library that helps reduce boilerplate code in Java by automatically generating methods such as getters, setters, equals(), hashCode(), and toString().

@Entity
@Data
//These annotations are used to mark the class Student as an entity class in the context of JPA (Java Persistence API). An entity represents a table in a relational database, and each instance of the entity corresponds to a row in that table. The @Data annotation from Lombok generates getter and setter methods, toString(), equals(), and hashCode() methods for the class.
public class Student {//declares the Student class. This class represents a student entity in the application

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
//    These annotations are used to specify that the id field is the primary key of the Student entity. The @Id annotation marks the field as the primary key, and the @GeneratedValue annotation specifies that the value of the primary key will be automatically generated by the database when a new Student entity is persisted. GenerationType.IDENTITY indicates that the database will automatically assign an ID to the entity.

    @Column(nullable = false)
    private String firstName;

    @Column(nullable = false)
    private String lastName;
    //These annotations are used to specify that the firstName and lastName fields are columns in the Student table. The @Column annotation allows you to customize the properties of the column. In this case, nullable = false means that these fields cannot be null in the database.

    @Column(nullable = false, unique = true)
    private String email;
    //This annotation specifies that the email field is also a column in the Student table. Additionally, unique = true indicates that each email value must be unique in the database.

    @Column(nullable = false)
    private String department;
}
//, this one specifies that the department field is a column in the Student table, and it cannot be null in the database.



// Let's delve into the theoretical explanation of each line of code:
//
//        1. `package com.example.sbrdemo.model;`: This line is a package declaration. In Java, packages are used to organize classes into namespaces, helping to avoid naming conflicts and making the code more manageable. Here, the classes related to the `Student` model are organized under the `com.example.sbrdemo.model` package.
//
//        2. `import jakarta.persistence.*;`: Java's `import` statement is used to bring in classes or packages from external libraries. In this case, it imports annotations and classes from the Jakarta Persistence API. Jakarta Persistence is a Java API for managing persistence and object-relational mapping in Java applications.
//
//        3. `import lombok.Data;`: This line imports the `@Data` annotation from the Lombok library. Lombok is a library that reduces boilerplate code in Java by automatically generating methods such as getters, setters, `toString()`, `equals()`, and `hashCode()`.
//
//        4. `@Entity`: This annotation marks the `Student` class as an entity in the context of the Java Persistence API (JPA). In JPA, an entity represents a table in a relational database, and each instance of the entity corresponds to a row in that table.
//
//        5. `@Data`: The `@Data` annotation is from Lombok and is used to automatically generate boilerplate code for getter and setter methods, `toString()`, `equals()`, and `hashCode()`.
//
//        6. `public class Student {`: This line declares the `Student` class, which represents a student entity in the application.
//
//        7. `@Id`: This annotation marks the `id` field as the primary key of the `Student` entity. In a relational database, the primary key uniquely identifies each record in a table.
//
//8. `@GeneratedValue(strategy = GenerationType.IDENTITY)`: This annotation specifies the strategy for generating values for the `id` field. `GenerationType.IDENTITY` indicates that the database will automatically assign a unique identifier when a new `Student` entity is persisted.
//
//9. `private Long id;`: This line declares the `id` field of type `Long`. This field serves as the primary key for the `Student` entity.
//
//10. `@Column(nullable = false) private String firstName;`: These annotations mark the `firstName` field as a column in the `Student` table with the constraint that it cannot be null.
//
//            11. `@Column(nullable = false) private String lastName;`: Similar to the previous line, this marks the `lastName` field as a column with the constraint that it cannot be null.
//
//            12. `@Column(nullable = false, unique = true) private String email;`: This annotation specifies that the `email` field is a column in the `Student` table, and each email value must be unique in the database.
//
//            13. `@Column(nullable = false) private String department;`: Like the previous annotations, this marks the `department` field as a column in the `Student` table with the constraint that it cannot be null.